'''
<나무 자르기>

- 문제 -
상근이는 나무 M 미터가 필요하다. 
근처에 나무를 구입할 곳이 모두 망해버렸기 때문에, 정부에 벌목 허가를 요청했다. 
정부는 상근이네 집 근처의 나무 한 줄에 대한 벌목 허가를 내주었고, 상근이는 새로 구입한 목재절단기를 이용해서 나무를 구할것이다.

목재절단기는 다음과 같이 동작한다. 
먼저, 상근이는 절단기에 높이 H를 지정해야 한다. 
높이를 지정하면 톱날이 땅으로부터 H미터 위로 올라간다. 
그 다음, 한 줄에 연속해있는 나무를 모두 절단해버린다.

따라서, 높이가 H보다 큰 나무는 H 위의 부분이 잘릴 것이고, 낮은 나무는 잘리지 않을 것이다. 
예를 들어, 한 줄에 연속해있는 나무의 높이가 20, 15, 10, 17이라고 하자. 상근이가 높이를 15로 지정했다면, 
나무를 자른 뒤의 높이는 15, 15, 10, 15가 될 것이고, 상근이는 길이가 5인 나무와 2인 나무를 들고 집에 갈 것이다. 
(총 7미터를 집에 들고 간다) 절단기에 설정할 수 있는 높이는 양의 정수 또는 0이다.

상근이는 환경에 매우 관심이 많기 때문에, 나무를 필요한 만큼만 집으로 가져가려고 한다. 
이때, 적어도 M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 구하는 프로그램을 작성하시오.

- 입력 -
첫째 줄에 나무의 수 N과 상근이가 집으로 가져가려고 하는 나무의 길이 M이 주어진다.
(1 ≤ N ≤ 1,000,000, 1 ≤ M ≤ 2,000,000,000)

둘째 줄에는 나무의 높이가 주어진다.
나무의 높이의 합은 항상 M보다 크거나 같기 때문에, 상근이는 집에 필요한 나무를 항상 가져갈 수 있다. 
높이는 1,000,000,000보다 작거나 같은 양의 정수 또는 0이다.

- 출력 -
적어도 M미터의 나무를 집에 가져가기 위해서 절단기에 설정할 수 있는 높이의 최댓값을 출력한다.

'''

'''
- 예제 입력 1 -
4 7
20 15 10 17

- 예제 출력 1 -
15
'''

# 이진 탐색 문제이기 때문에 브루트 포스 방법으로 풀면 시간초과!
# pypy3 로 돌려야 시간초과가 나지 않는다.

n, m = map(int, input().split())

tree = list(map(int, input().split()))

start, end = 1, max(tree)       # 최소 높이의 나무 1m 부터 주어진 tree의 최대까지 이분탐색 검색 범위 설정

while start <= end:             # 적절한 벌목 높이를 찾는 알고리즘 
                                # start와 end가 같아지면: 조건을 만족하는 최대의 나무 절단 높이를 찾으면 탈출한다.
    mid = (start + end) // 2

    sum = 0                     # 벌목된 나무 총합

    for i in tree:
        if i >= mid:
            sum += i - mid
    
    # 벌목 높이를 이분탐색
    if sum >= m:
        start = mid + 1         # 벌목나무가 목표치 이상이면 mid+1을 start로 두고 다시 while문 반복

    elif sum < m:
        end = mid - 1           # 벌목나무가 목표치 이하면 mid-1을 end로 두고 다시 while문 반복

    elif sum == m:
        print(mid)

if start > end:                 # 이 경우 end 를 출력해야 답이 된다. (start 나 mid 를 출력하면 틀렸다고 나옴)
    print(end)