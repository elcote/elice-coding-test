'''
<공유기 설치>

- 문제 -
도현이의 집 n개가 수직선 위에 있다. 
각각의 집의 좌표는 x1, ..., xN이고, 집 여러개가 같은 좌표를 가지는 일은 없다.

도현이는 언제 어디서나 와이파이를 즐기기 위해서 집에 공유기 C개를 설치하려고 한다. 
최대한 많은 곳에서 와이파이를 사용하려고 하기 때문에, 한 집에는 공유기를 하나만 설치할 수 있고, 
가장 인접한 두 공유기 사이의 거리를 가능한 크게 하여 설치하려고 한다.

C개의 공유기를 N개의 집에 적당히 설치해서, 
가장 인접한 두 공유기 사이의 거리를 최대로 하는 프로그램을 작성하시오.

- 입력 -
첫째 줄에 집의 개수 N (2 ≤ N ≤ 200,000)과 공유기의 개수 C (2 ≤ C ≤ N)이 하나 이상의 빈 칸을 사이에 두고 주어진다. 
둘째 줄부터 N개의 줄에는 집의 좌표를 나타내는 xi (0 ≤ xi ≤ 1,000,000,000)가 한 줄에 하나씩 주어진다.

- 출력 -
첫째 줄에 가장 인접한 두 공유기 사이의 최대 거리를 출력한다.

'''

'''
- 예제 입력 1 -
5 3
1
2
8
4
9

- 예제 출력 1 -
3

- 힌트 -
공유기를 1, 4, 8 또는 1, 4, 9에 설치하면 가장 인접한 두 공유기 사이의 거리는 3이고, 
이 거리보다 크게 공유기를 3개 설치할 수 없다.
'''

# 이 방법으로 문제를 진행해보면

# 1. array라는 리스트에 집들의 좌표를 입력받은 후에 정렬.

# 2. start = 1, end = array[-1] - array[0] 으로 설정. ( 시작값은 최소 거리, 끝 값은 최대 거리 )

# 3. 앞 집부터 공유기 설치

# 4. 설치할 수 있는 공유기 개수가 c개를 넘어가면 더 넓게 설치할 수 있다는 이야기 이므로 설치거리를 mid + 1로 설정하여 다시 앞집부터 설치.

# 5. c개를 넘어가지 않는다면 더 좁게 설치해야 한다는 이야기 이므로 mid - 1로 설정.

# 이분탐색으로 어떻게 접근하는지 이해하기 어려웠다.

# start 는 차이가 최소인 1, end 는 차이가 최대인 (끝값-처음값)으로 둔다.

# mid 만큼 떨어져 있을 때, 다음 집의 위치보다 작으면 공유기를 한대 설치한다. - 다른 집의 위치란?

# 공유기를 설치가 갯수가 c(공유기의 갯수)와 같거나 클때는, mid의 값을 더 늘려서 공유기를 더 적게 설치하게 해야하니 start를 mid+1로 둔다.

# 반대로 공유기 설치 갯수가 c보다 작을 때는, mid의 값을 줄여 공유기를 더 설치하도록 해야하니 end를 mid-1로 둔다.

'''
# 이 문제의 경우 이진 탐색으로 해결할 수 있는 문제였습니다. 
# 그러나 일반적인 이진 탐색을 이용한 방법의 경우 start, end를 이용하여 mid값을 잡아주고 찾아야 하는 target이 있는 반면 
# 이 문제는 target이라는 것이 딱히 없습니다.

# 따라서 target을 설정하는 것이 아닌 
# ★★ 집 사이의 떨어진 거리에 대해 이진 탐색의 방법을 응용해야 한다는 것입니다. ★★

# 문제 해결의 과정은 다음과 같습니다.

# 1. 집과 집 사이의 거리의 최솟값을 start로 거리의 최댓값을 end로 지정한다.
# (문제에서 집 여러 개가 같은 좌표를 가지는 일은 없기 때문에 
# 공유기 사이의 거리의 최솟값은 1, 최댓값은 입력받은 집들의 좌표를 정렬한 후 맨 마지막 원소와 맨 처음 원소 사이의 거리)

# 2. start와 end를 이용해 mid 값을 구하고 
# 해당 mid 값을 공유기들 사이의 거리의 최솟값으로 정하였을때 C 개만큼 설치할 수 있는지 확인한다.

# 3-1. C 개만큼 설치할 수 없을 때는 공유기 사이의 거리가 큼. 따라서 end를 mid - 1로 설정하여 2번 과정 반복
# 3-2. C 개만큼 설치할 수 있을 때는 공유기 사이의 거리를 하나씩 증가하여 최댓값을 찾음. 따라서 start를 mid + 1로 설정하여 2번 과정 반복
'''

'''

1 2 4 8 9

여기에 공유기 3개를 설치해야 됨


- 힌트 -
공유기를 1, 4, 8 또는 1, 4, 9에 설치하면 가장 인접한 두 공유기 사이의 거리는 3이고, 
이 거리보다 크게 공유기를 3개 설치할 수 없다.
'''

import sys
n, c = map(int, (input().split()))
house = [int(sys.stdin.readline()) for _ in range(n)]

# 해당 거리를 유지하며 공유기가 몇 개 설치될 수 있는가?
def router_counter(distance):
    count = 1
    cur_house = house[0]                        # 시작점
    for i in range(1, n):                       # 집모두를 돈다
        if cur_house + distance <= house[i]:    # 이전 집에서 해당 거리보다 멀리 떨어진 집이라면
            count += 1
            cur_house = house[i]                # 공유기 설치된 집 갱신
    return count

house = sorted(house)                           # 이분탐색을 위한 정렬
start, end = 1, house[-1] - house[0]            # 최소 거리와 최대 거리

while start <= end:                             # 이분탐색 알고리즘
    mid = (start+end) // 2
    
    if router_counter(mid) >= c:                # c 개 만큼 설치할 수 있거나 더 설치할 수 있으면 start 거리을 늘린다.
        answer = mid
        start = mid + 1

    elif router_counter(mid) < c:               # c 개 만큼 설치할 수 없는 경우 end 거리를 줄인다.
        end = mid - 1
        
print(answer)