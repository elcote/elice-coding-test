'''
<입국심사>

- 문제 -
상근이와 친구들은 오스트레일리아로 여행을 떠났다. 
상근이와 친구들은 총 M명이고, 지금 공항에서 한 줄로 서서 입국심사를 기다리고 있다. 
입국심사대는 총 N개가 있다. 

각 입국심사관이 심사를 하는데 걸리는 시간은 사람마다 모두 다르다. ★★
k번 심사대에 앉아있는 심사관이 한 명을 심사를 하는데 드는 시간은 Tk이다.

가장 처음에 모든 심사대는 비어있고, 심사를 할 준비를 모두 끝냈다. 
상근이와 친구들은 비행기 하나를 전세내고 놀러갔기 때문에, 
지금 심사를 기다리고 있는 사람은 모두 상근이와 친구들이다. ★★
한 심사대에서는 한 번에 한 사람만 심사를 할 수 있다.

가장 앞에 서 있는 사람은 비어있는 심사대가 보이면 거기로 가서 심사를 받을 수 있다. 하지만 항상 이동을 해야 하는 것은 아니다. 
더 빠른 심사대의 심사가 끝나길 기다린 다음에 그 곳으로 가서 심사를 받아도 된다.

상근이와 친구들은 모두 컴퓨터 공학과 학생이기 때문에, 
어떻게 심사를 받으면 모든 사람이 심사를 받는데 걸리는 시간이 최소가 될지 궁금해졌다. ★★

예를 들어, 두 심사대가 있고, 심사를 하는데 걸리는 시간이 각각 7초와 10초라고 하자. 
줄에 서 있는 사람이 6명이라면, 가장 첫 두 사람은 즉시 심사를 받으러 가게 된다. 7초가 되었을 때, 
첫 번째 심사대는 비어있게 되고, 세 번째 사람이 그곳으로 이동해서 심사를 받으면 된다. 

10초가 되는 순간, 네 번째 사람이 이곳으로 이동해서 심사를 받으면 되고, 
14초가 되었을 때는 다섯 번째 사람이 첫 번째 심사대로 이동해서 심사를 받으면 된다. 

20초가 되었을 때, 두 번째 심사대가 비어있게 된다. 
하지만, 여섯 번째 사람이 그 곳으로 이동하지 않고, 1초를 더 기다린 다음에 첫 번째 심사대로 이동해서 심사를 받으면, 
모든 사람이 심사를 받는데 걸리는 시간이 28초가 된다. ★★

만약, 마지막 사람이 1초를 더 기다리지않고, 
첫 번째 심사대로 이동하지 않았다면, 모든 사람이 심사를 받는데 걸리는 시간이 30초가 되게 된다. ★★

상근이와 친구들이 심사를 받는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.

- 입력 -
첫째 줄에 N(입국 심사대 갯수)과 M(사람수)이 주어진다. 
(1 ≤ N ≤ 100,000, 1 ≤ M ≤ 1,000,000,000)

다음 N개 줄에는 각 심사대에서 심사를 하는데 걸리는 시간인 Tk가 주어진다. (1 ≤ Tk ≤ 109)

- 출력 -
첫째 줄에 상근이와 친구들이 심사를 마치는데 걸리는 시간의 최솟값을 출력한다.

- 예제 입력1 -
2 6
7
10

- 예제 출력1 -
28

'''

# <이분탐색 알고리즘>을 활용해야하는 문제입니다.

# ★★ 이분탐색의 경계값은 ★★
# left = 최단 시간 심사대, 
# right = 최장 시간 심사대 * 인원수 입니다.

# total 은 mid시간 동안 검사할 수 있는 총 사람의 수 입니다. 
# total 은 mid시간 각 심사대의 소요 시간 의 총합을 구하면 됩니다. 
# mid 시간동안 M 보다 더 많은 인원을 심사하는 것은 답이 될 수 있지만 
# M 보다 적은 인원을 심사하는 것은 안되므로 total >= M 인 경우와 아닌 경우로 나누어 생각했습니다.

# 파이썬 같은 경우에는 sys를 꼭 import하여 풀어야합니다.
# sys.stdin.readline()를 활용하여 입력값을 받아야지 시간초과에 안 걸립니다. 
# N 이 작을 때에는 문제가 없지만 100,000만큼의 데이터를 받을 때에는 둘의 속도가 상당히 차이가 납니다. 
# 저 역시 처음에 int(input()) 을 이용하여 입력값을 받았는데 계속 시간초과에 걸려 통과하지 못했습니다.

'''
- 예제 입력1 -
2 6
7
10

- 예제 출력1 -
28

'''
import sys

n, m = map(int, sys.stdin.readline().split())

t = [int(sys.stdin.readline()) for _ in range(n)]

left   = min(t)                         # 최소 시간 (최소로 시간이 걸리는 입국 심사대)          -> 범위를 넉넉하게 잡음.
answer = right = max(t) * m             # 최대 시간 (최대로 시간이 걸리는 입국 심사대 * 사람수) -> 범위를 넉넉하게 잡음.

while left <= right:
    total = 0
    mid = (left + right) // 2
    print(f"left 입니다. : {left}")
    print(f"right 입니다. : {right}")
    print(f"mid 입니다. : {mid}")

    for i in range(n):
        total += mid // t[i]            # 각 입국 심사대에서 주어진 시간(mid) 동안 처리 가능한 인원 수를 합산

    if total >= m:
        print(f"{mid}초 동안 출입국 심사가 가능합니다.\n")
        right = mid - 1
        answer = min(answer, mid)

    else:
        print(f"{mid}초 동안 출입국 심사가 불가능합니다.\n")
        left = mid + 1
print(answer)